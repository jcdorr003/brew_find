{"version":3,"sources":["Beer icon.svg","components/Header.js","components/Home.js","components/BrewerySearch.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","id","src","require","alt","to","Home","BrewerySearch","state","brewery","clicked","handleClick","d","setState","currentBrewery","console","log","this","props","breweries","mappedData","map","i","key","onClick","name","details","city","street","target","href","website_url","React","Component","Main","makeAPICall","a","axios","get","then","response","data","catch","error","path","render","exact","component","from","Footer","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,uC,iGCkB5BC,EAfA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKC,GAAG,YAAYC,IAAKC,EAAQ,IAAqBC,IAAI,KAC1D,wBAAIH,GAAG,SAAP,cAEF,yBAAKD,UAAU,aACb,kBAAC,IAAD,CAAMK,GAAG,SAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,a,yFCGOC,EAbF,WACX,OACE,yBAAKN,UAAU,mBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,oBACb,wBAAIC,GAAG,YAAP,aACA,wBAAIA,GAAG,YAAP,sCCiCKM,E,2MAtCbC,MAAQ,CACNC,QAAQ,GACRC,SAAQ,G,EAEVC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,eAAeF,EACfF,SAAQ,K,wEAIF,IAAD,OACPK,QAAQC,IAAIC,KAAKC,MAAMC,WACvB,IAAIC,EAAaH,KAAKC,MAAMC,UAAUE,IAAI,SAACT,EAAGU,GAC5C,OAAO,uBAAGC,IAAKD,EAAGE,QAAS,kBAAI,EAAKb,YAAYC,KAAKA,EAAEa,QAGrDC,EAAUT,KAAKT,MAAME,QACvB,oCACE,2BAAIO,KAAKT,MAAMM,eAAeW,MAC9B,2BAAIR,KAAKT,MAAMM,eAAea,MAC9B,2BAAIV,KAAKT,MAAMM,eAAec,QAC9B,uBAAGC,OAAO,SAASC,KAAMb,KAAKT,MAAMM,eAAeiB,aAAnD,YAEA,KACJ,OACE,yBAAK9B,GAAG,oBACN,yBAAKA,GAAG,eACLmB,GAEH,yBAAKnB,GAAG,kBACLyB,Q,GAhCiBM,IAAMC,WCgDnBC,E,YA1Cb,aAAe,IAAD,8BACZ,+CAMFC,YAPc,qBAOA,sBAAAC,EAAA,qDACZC,IAAMC,IAAI,6DACTC,KAAK,SAAAC,GACN,EAAK3B,SAAS,CACZM,UAAWqB,EAASC,OAEtB1B,QAAQC,IAAI,kBAAmBwB,EAASC,QAEvCC,MAAM,SAAAC,GACP5B,QAAQC,IAAI2B,KATA,yCALZ,EAAKnC,MAAQ,CACXW,UAAW,IAHD,E,iFAqBZF,KAAKkB,gB,+BAKG,IAAD,OAGP,OAFApB,QAAQC,IAAIC,KAAKT,MAAMW,WAGrB,0BAAMnB,UAAU,QACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4C,KAAK,UAAUC,OAAQ,SAAC3B,GAAD,OAAW,kBAAC,EAAD,iBAAmBA,EAAnB,CAA+BC,UAAW,EAAKX,MAAMW,gBAC9F,kBAAC,IAAD,CAAO2B,OAAK,EAACF,KAAK,QAAQG,UAAWzC,IACrC,kBAAC,IAAD,CAAU0C,KAAK,IAAI3C,GAAG,e,GApCb2B,IAAMC,WCIVgB,EARA,WACb,OACE,yBAAKjD,UAAU,UACb,qDCYSkD,EAXH,WAEV,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASX,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEEY,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3349076f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Beer icon.e4889093.svg\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <nav className='navbar'>\n      <div className='logo'>\n        <img id='beer-icon' src={require(\"../Beer icon.svg\")} alt='' />\n        <h1 id='title'>BREW FIND</h1>\n      </div>\n      <div className='nav-links'>\n        <Link to='/home'>Home</Link>\n        <Link to='/search'>Search</Link>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Home = () => {\n  return(\n    <div className='welcome-wrapper'>\n      <div className='welcome-container'>\n        <div className='welcome-messages'>\n          <h1 id='welcome1'>Got Beer?</h1>\n          <h1 id='welcome2'>Check out your local breweries</h1>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nclass BrewerySearch extends React.Component {\n  state = {\n    brewery:{},\n    clicked:false\n  }\n  handleClick = (d) => {\n    this.setState({\n      currentBrewery:d,\n      clicked:true\n    })\n  }\n\n  render() {\n    console.log(this.props.breweries)\n    let mappedData = this.props.breweries.map((d, i) => {\n      return <p key={i} onClick={()=>this.handleClick(d)}>{d.name}</p>\n    })\n\n    let details = this.state.clicked ? (\n      <>\n        <p>{this.state.currentBrewery.name}</p>\n        <p>{this.state.currentBrewery.city}</p>\n        <p>{this.state.currentBrewery.street}</p>\n        <a target='_blank' href={this.state.currentBrewery.website_url}>Website</a>\n      </>\n    ) : null\n    return (\n      <div id='breweryContainer'>\n        <div id='breweryList'>\n          {mappedData}\n        </div>\n        <div id='breweryDetails'>\n          {details}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BrewerySearch;\n","import React from 'react';\nimport axios from 'axios'\nimport {Route, Switch, Redirect} from 'react-router-dom'\nimport Home from './Home'\nimport BrewerySearch from './BrewerySearch'\n\nclass Main extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      breweries: []\n    }\n  }\n\n  makeAPICall = async () => {\n    axios.get('https://api.openbrewerydb.org/breweries?by_state=new_york')\n    .then(response => {\n    this.setState({\n      breweries: response.data\n    });\n    console.log('this is allData', response.data);\n    })\n    .catch(error => {\n    console.log(error);\n    });\n  }\n\n  componentDidMount() {\n    this.makeAPICall();\n  }\n\n\n\n  render() {\n    console.log(this.state.breweries)\n\n    return (\n      <main className='main'>\n        <Switch>\n          <Route path='/search' render={(props) => <BrewerySearch {...props}      breweries={this.state.breweries} />} />\n          <Route exact path='/home' component={Home} />\n          <Redirect from=\"/\" to=\"home\" />\n        </Switch>\n      </main>\n    )\n  }\n}\n\n\nexport default Main;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <nav className='footer'>\n      <p>CREATED BY J.C. DORR</p>\n    </nav>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main'\nimport Footer from './components/Footer'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>  \n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}